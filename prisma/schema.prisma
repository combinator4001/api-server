// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PERSON
  COMPANY
}

model User {
  id            Int     @id @default(autoincrement())
  username      String  @unique
  password      String
  email         String  @unique
  showEmail     Boolean @default(false)
  verifiedEmail Boolean @default(true)
  imageUrl      String  @default("")
  bio           String  @default("")
  role          Role

  admin   Admin?
  person  Person?
  company Company?

  blogs         Blog[]
  followedBy    User[]      @relation("UserFollows", references: [id], onDelete: Cascade)
  following     User[]      @relation("UserFollows", references: [id])
  followingTags FollowTag[]
}

model Admin {
  user_id   Int    @id
  firstName String
  lastName  String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Person {
  user_id   Int    @id
  firstName String
  lastName  String

  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Investments Invest[]
}

model Company {
  user_id Int      @id
  name    String
  owners  String[]

  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Investors Invest[]
}

model Blog {
  id               Int           @id @default(autoincrement())
  author_id        Int
  estimatedMinutes Int
  createdAt        DateTime      @default(now())
  lastModify       DateTime      @default(now())
  title            String
  contentUrl       String
  tags             TagsOnBlogs[]

  author User @relation(fields: [author_id], references: [id], onDelete: Cascade)
}

model Tag {
  id             Int           @id @default(autoincrement())
  name           String        @unique
  blogs          TagsOnBlogs[]
  followedByUser FollowTag[]
}

//join table
model TagsOnBlogs {
  blog_id Int
  blog    Blog @relation(fields: [blog_id], references: [id], onDelete: Cascade)
  tag_id  Int
  tag     Tag  @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@id([blog_id, tag_id])
}

enum InvestState {
  PENDING
  ACCEPTED
  REJECTED
}

//join table
model Invest {
  id          Int         @unique @default(autoincrement())
  company_id  Int
  investor_id Int
  state       InvestState
  message     String      @db.VarChar(255)
  money       Float
  company     Company     @relation(fields: [company_id], references: [user_id], onDelete: Cascade)
  person      Person      @relation(fields: [investor_id], references: [user_id], onDelete: Cascade)

  @@id([investor_id, company_id])
}

model FollowTag {
  @@id([userId, tagId])
  id     Int   @unique @default(autoincrement())
  userId Int
  tagId  Int

  User   User @relation(fields: [userId], references: [id])
  Tag    Tag  @relation(fields: [tagId], references: [id])
}
